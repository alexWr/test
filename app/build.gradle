apply plugin: 'com.android.application'

android {

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        applicationId globalConfiguration["androidApplicationId"]
        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]
        project.ext.set("archivesBaseName", "ryaba- " + defaultConfig.versionName)
        testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]
        testApplicationId globalConfiguration["testApplicationId"]
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            try {
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
                storeFile file('../buildsystem/android_release.jks')
                storePassword RELEASE_STORE_PASSWORD
            } catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            zipAlignEnabled false
            applicationIdSuffix ".debug"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    def presentationDependencies = rootProject.ext.presentationDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies
    implementation presentationDependencies.appcompat
    implementation presentationDependencies.design
    implementation presentationDependencies.constraint
    implementation presentationDependencies.cardView
    implementation presentationDependencies.multiDex
    implementation presentationDependencies.dagger
    implementation presentationDependencies.butterKnife
    implementation presentationDependencies.recyclerView
    implementation presentationDependencies.rxJava
    implementation presentationDependencies.rxAndroid
    implementation presentationDependencies.picassoLib
    implementation presentationDependencies.arrowLib
    api presentationDependencies.okHttp
    api presentationDependencies.okHttpInterceptor
    api presentationDependencies.gson
    api presentationDependencies.retrofitConverterGson
    implementation presentationDependencies.retrofitAdapter
    api presentationDependencies.retrofit
    annotationProcessor presentationDependencies.daggerCompiler
    annotationProcessor presentationDependencies.butterKnifeAnnotation
    //Development
    implementation developmentDependencies.leakCanary
}
